selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   (event_no%7!=0)

test_time_selection:
   ### selection to apply at test time (i.e., when running w/ --predict)
   (event_no%1==0)

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   pfcand1_mask: awkward.JaggedArray.ones_like(Jet1PFCands_pt)
   sv1_mask: awkward.JaggedArray.ones_like(Jet1SVsAK4_etarel)
   pfcand2_mask: awkward.JaggedArray.ones_like(Jet2PFCands_pt)
   sv2_mask: awkward.JaggedArray.ones_like(Jet2SVsAK4_etarel)

   ### high-level inputs
   dphijj_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_dphijj
   dphijj_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_dphijj
   Jet_pt1_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_Jet_pt1
   Jet_pt1_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_Jet_pt1
   Jet_pt2_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_Jet_pt2
   Jet_pt2_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_Jet_pt2
   Lepton_pt1_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_Lepton_pt1
   Lepton_pt1_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_Lepton_pt1
   Lepton_pt2_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_Lepton_pt2
   Lepton_pt2_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_Lepton_pt2
   dphill_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_dphill
   dphill_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_dphill
   mll_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_mll
   mll_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_mll
   met_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_met
   met_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_met
   ptll_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_ptll
   ptll_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_ptll
   mTi_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_mTi
   mTi_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_mTi
   zlep1_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_zlep1
   zlep1_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_zlep1
   Zlep2_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_Zlep2
   Zlep2_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_Zlep2
   drj1ll_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_drj1ll
   drj1ll_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_drj1ll
   drj2ll_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_drj2ll
   drj2ll_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_drj2ll
   pt_ratio_1: awkward.JaggedArray.ones_like(Jet1PFCands_pt) * ssww_leppt1_jetpt30_pt_ratio
   pt_ratio_2: awkward.JaggedArray.ones_like(Jet2PFCands_pt) * ssww_leppt1_jetpt30_pt_ratio

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  ### [note]: `[var]_mask` will not be transformed even if `method=auto`
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   pf1_points:
      length: 40
      vars: 
         - Jet1PFCands_eta
         - Jet1PFCands_phi
   pf1_features:
      length: 40
      vars: 
         - [Jet1PFCands_pt_log, 1, 0.5]
         - [Jet1PFCands_e_log, 1.3, 0.5]
         - Jet1PFCands_eta
         - Jet1PFCands_phi
         - [Jet1PFCands_abseta, 2, 1.6]
         - Jet1PFCands_charge
         - Jet1PFCands_isEl
         - Jet1PFCands_isMu
         - Jet1PFCands_isGamma
         - Jet1PFCands_isChargedHad
         - Jet1PFCands_isNeutralHad
         - [Jet1PFCands_pvAssocQuality, 4, 0.3]
         - Jet1PFCands_lostInnerHits
         - [Jet1PFCands_trkChi2, 5, 0.2]
         - [Jet1PFCands_trkQuality, 0, 0.2]
         - [Jet1PFCands_dz, 0, 180]
         - [Jet1PFCands_dzSig, 0, 0.9]
         - [Jet1PFCands_d0, 0.0, 300]
         - [Jet1PFCands_d0Sig, 0, 1.0]
         - [Jet1PFCandsAK4_btagEtaRel, 1.5, 0.5]
         - [Jet1PFCandsAK4_btagPtRatio, 0, 1]
         - [Jet1PFCandsAK4_btagPParRatio, 0, 1]
         - [Jet1PFCandsAK4_btagSip3dVal, 0, 100]
         - [Jet1PFCandsAK4_btagSip3dSig, 0, 0.5]
         - [Jet1PFCandsAK4_btagJetDistVal, 0, 40]
         - [dphijj_1, 0, 1]
         - [Jet_pt1_1, 500, 0.01]
         - [Jet_pt2_1, 500, 0.01]
         - [Lepton_pt1_1, 500, 0.01]
         - [Lepton_pt2_1, 500, 0.01]
         - [dphill_1, 0, 1]
         - [mll_1, 500, 0.01]
         - [met_1, 500, 0.01]
         - [ptll_1, 500, 0.01]
         - [mTi_1, 500, 0.01]
         - [zlep1_1, 1, 5]
         - [Zlep2_1, 1, 5]
         - [drj1ll_1, 5, 1]
         - [drj2ll_1, 5, 1]
         - [pt_ratio_1, 2.5, 2]
   pf1_mask:
      length: 40
      vars: 
         - pfcand1_mask
   pf2_points:
      length: 40
      vars: 
         - Jet2PFCands_eta
         - Jet2PFCands_phi
   pf2_features:
      length: 40
      vars: 
         - [Jet2PFCands_pt_log, 1, 0.5]
         - [Jet2PFCands_e_log, 1.3, 0.5]
         - Jet2PFCands_eta
         - Jet2PFCands_phi
         - [Jet2PFCands_abseta, 2, 1.6]
         - Jet2PFCands_charge
         - Jet2PFCands_isEl
         - Jet2PFCands_isMu
         - Jet2PFCands_isGamma
         - Jet2PFCands_isChargedHad
         - Jet2PFCands_isNeutralHad
         - [Jet2PFCands_pvAssocQuality, 4, 0.3]
         - Jet2PFCands_lostInnerHits
         - [Jet2PFCands_trkChi2, 5, 0.2]
         - [Jet2PFCands_trkQuality, 0, 0.2]
         - [Jet2PFCands_dz, 0, 180]
         - [Jet2PFCands_dzSig, 0, 0.9]
         - [Jet2PFCands_d0, 0.0, 300]
         - [Jet2PFCands_d0Sig, 0, 1.0]
         - [Jet2PFCandsAK4_btagEtaRel, 1.5, 0.5]
         - [Jet2PFCandsAK4_btagPtRatio, 0, 1]
         - [Jet2PFCandsAK4_btagPParRatio, 0, 1]
         - [Jet2PFCandsAK4_btagSip3dVal, 0, 100]
         - [Jet2PFCandsAK4_btagSip3dSig, 0, 0.5]
         - [Jet2PFCandsAK4_btagJetDistVal, 0, 40]
         - [dphijj_2, 0, 1]
         - [Jet_pt1_2, 500, 0.01]
         - [Jet_pt2_2, 500, 0.01]
         - [Lepton_pt1_2, 500, 0.01]
         - [Lepton_pt2_2, 500, 0.01]
         - [dphill_2, 0, 1]
         - [mll_2, 500, 0.01]
         - [met_2, 500, 0.01]
         - [ptll_2, 500, 0.01]
         - [mTi_2, 500, 0.01]
         - [zlep1_2, 1, 5]
         - [Zlep2_2, 1, 5]
         - [drj1ll_2, 5, 1]
         - [drj2ll_2, 5, 1]
         - [pt_ratio_2, 2.5, 2]
   pf2_mask:
      length: 40
      vars: 
         - pfcand2_mask
   sv1_points:
      length: 5
      vars:
         - Jet1SVsAK4_eta
         - Jet1SVsAK4_phi
   sv1_features:
      length: 5
      vars:
         - [Jet1SVsAK4_pt_log, 4, 0.6]
         - [Jet1SVsAK4_mass, 1.2, 0.3]
         - Jet1SVsAK4_eta
         - Jet1SVsAK4_phi
         - [Jet1SVsAK4_abseta, 2, 1.6]
         - [Jet1SVsAK4_ntracks, 3, 1]
         - [Jet1SVsAK4_normchi2, 0.8, 0.6]
         - [Jet1SVsAK4_dxy, 0.4, 0.25]
         - [Jet1SVsAK4_dxysig, 7, 0.02]
         - [Jet1SVsAK4_d3d, 0.5, 0.2]
         - [Jet1SVsAK4_d3dsig, 7, 0.02]
   sv1_mask:
      length: 5
      vars:
         - sv1_mask
   sv2_points:
      length: 5
      vars:
         - Jet2SVsAK4_eta
         - Jet2SVsAK4_phi
   sv2_features:
      length: 5
      vars:
         - [Jet2SVsAK4_pt_log, 4, 0.6]
         - [Jet2SVsAK4_mass, 1.2, 0.3]
         - Jet2SVsAK4_eta
         - Jet2SVsAK4_phi
         - [Jet2SVsAK4_abseta, 2, 1.6]
         - [Jet2SVsAK4_ntracks, 3, 1]
         - [Jet2SVsAK4_normchi2, 0.8, 0.6]
         - [Jet2SVsAK4_dxy, 0.4, 0.25]
         - [Jet2SVsAK4_dxysig, 7, 0.02]
         - [Jet2SVsAK4_d3d, 0.5, 0.2]
         - [Jet2SVsAK4_d3dsig, 7, 0.02]
   sv2_mask:
      length: 5
      vars:
         - sv2_mask

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [
      is_ll, isnot_ll
      ]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
      # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass) 

observers:
   - run
   - luminosityBlock
   - event
   - is_ll
   - is_tl
   - is_tt
   - event_no

treename: deepntuplizer/tree