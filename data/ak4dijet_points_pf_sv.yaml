selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   (event_no%7!=0)

test_time_selection:
   ### selection to apply at test time (i.e., when running w/ --predict)
   (event_no%7==0)

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   pfcand1_mask: awkward.JaggedArray.ones_like(Jet1PFCands_pt)
   # sv_mask: awkward.JaggedArray.ones_like(sv_etarel)
   
   Jet1PFCands_pt_log: np.log(Jet1PFCands_pt)
   Jet1PFCands_phirel: "Jet1PFCands_phi - jet1_phi - 2*np.pi*np.floor((Jet1PFCands_phi - jet1_phi) / (2*np.pi) + 0.5)"
   Jet1PFCands_etarel: "np.sign(jet1_eta) * (Jet1PFCands_eta - jet1_eta)"
   Jet1PFCands_abseta: np.abs(Jet1PFCands_eta)
   Jet1PFCands_isEl: "np.abs(Jet1PFCands_pdgId) == 11"
   Jet1PFCands_isMu: "np.abs(Jet1PFCands_pdgId) == 13"
   Jet1PFCands_isChargedHad: "np.abs(Jet1PFCands_pdgId) == 211"
   Jet1PFCands_isGamma: "np.abs(Jet1PFCands_pdgId) == 22"
   Jet1PFCands_isNeutralHad: "np.abs(Jet1PFCands_pdgId) == 130"
   Jet1PFCands_dzSig: "Jet1PFCands_dz / Jet1PFCands_dzErr"
   Jet1PFCands_d0Sig: "Jet1PFCands_d0 / Jet1PFCands_d0Err"

   pfcand2_mask: awkward.JaggedArray.ones_like(Jet2PFCands_pt)
   # sv_mask: awkward.JaggedArray.ones_like(sv_etarel)
   
   Jet2PFCands_pt_log: np.log(Jet2PFCands_pt)
   Jet2PFCands_phirel: "Jet2PFCands_phi - jet1_phi - 2*np.pi*np.floor((Jet2PFCands_phi - jet1_phi) / (2*np.pi) + 0.5)"
   Jet2PFCands_etarel: "np.sign(jet1_eta) * (Jet2PFCands_eta - jet1_eta)"
   Jet2PFCands_abseta: np.abs(Jet2PFCands_eta)
   Jet2PFCands_isEl: "np.abs(Jet2PFCands_pdgId) == 11"
   Jet2PFCands_isMu: "np.abs(Jet2PFCands_pdgId) == 13"
   Jet2PFCands_isChargedHad: "np.abs(Jet2PFCands_pdgId) == 211"
   Jet2PFCands_isGamma: "np.abs(Jet2PFCands_pdgId) == 22"
   Jet2PFCands_isNeutralHad: "np.abs(Jet2PFCands_pdgId) == 130"
   Jet2PFCands_dzSig: "Jet2PFCands_dz / Jet2PFCands_dzErr"
   Jet2PFCands_d0Sig: "Jet2PFCands_d0 / Jet2PFCands_d0Err"

   isnot_tt: "is_tt == 0"

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  ### [note]: `[var]_mask` will not be transformed even if `method=auto`
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   pf1_points:
      length: 40
      vars: 
         - Jet1PFCands_etarel
         - Jet1PFCands_phirel
   pf1_features:
      length: 40
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [Jet1PFCands_pt_log, 1, 0.5]
         # - [Jet1PFCands_e_log, 1.3, 0.5]
         - Jet1PFCands_etarel
         - Jet1PFCands_phirel
         - [Jet1PFCands_abseta, 0.6, 1.6]
         - Jet1PFCands_charge
         - Jet1PFCands_isEl
         - Jet1PFCands_isMu
         - Jet1PFCands_isGamma
         - Jet1PFCands_isChargedHad
         - Jet1PFCands_isNeutralHad
         - [Jet1PFCands_pvAssocQuality, 4, 0.3]
         - Jet1PFCands_lostInnerHits
         # - [pfcand_normchi2, 5, 0.2]
         # - [pfcand_quality, 0, 0.2]
         - [Jet1PFCands_dz, 0, 180]
         - [Jet1PFCands_dzSig, 0, 0.9]
         - [Jet1PFCands_d0, 0.0, 300]
         - [Jet1PFCands_d0Sig, 0, 1.0]
         - [Jet1PFCandsAK4_btagEtaRel, 1.5, 0.5]
         - [Jet1PFCandsAK4_btagPtRatio, 0, 1]
         - [Jet1PFCandsAK4_btagPParRatio, 0, 1]
         - [Jet1PFCandsAK4_btagSip3dVal, 0, 100]
         - [Jet1PFCandsAK4_btagSip3dSig, 0, 0.5]
         - [Jet1PFCandsAK4_btagJetDistVal, 0, 40]
   pf1_mask:
      length: 40
      vars: 
         - pfcand1_mask
   pf2_points:
      length: 40
      vars: 
         - Jet2PFCands_etarel
         - Jet2PFCands_phirel
   pf2_features:
      length: 40
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [Jet2PFCands_pt_log, 1, 0.5]
         # - [Jet2PFCands_e_log, 1.3, 0.5]
         - Jet2PFCands_etarel
         - Jet2PFCands_phirel
         - [Jet2PFCands_abseta, 0.6, 1.6]
         - Jet2PFCands_charge
         - Jet2PFCands_isEl
         - Jet2PFCands_isMu
         - Jet2PFCands_isGamma
         - Jet2PFCands_isChargedHad
         - Jet2PFCands_isNeutralHad
         - [Jet2PFCands_pvAssocQuality, 4, 0.3]
         - Jet2PFCands_lostInnerHits
         # - [pfcand_normchi2, 5, 0.2]
         # - [pfcand_quality, 0, 0.2]
         - [Jet2PFCands_dz, 0, 180]
         - [Jet2PFCands_dzSig, 0, 0.9]
         - [Jet2PFCands_d0, 0.0, 300]
         - [Jet2PFCands_d0Sig, 0, 1.0]
         - [Jet2PFCandsAK4_btagEtaRel, 1.5, 0.5]
         - [Jet2PFCandsAK4_btagPtRatio, 0, 1]
         - [Jet2PFCandsAK4_btagPParRatio, 0, 1]
         - [Jet2PFCandsAK4_btagSip3dVal, 0, 100]
         - [Jet2PFCandsAK4_btagSip3dSig, 0, 0.5]
         - [Jet2PFCandsAK4_btagJetDistVal, 0, 40]
   pf2_mask:
      length: 40
      vars: 
         - pfcand2_mask
   # sv_points:
   #    length: 10
   #    vars:
   #       - sv_etarel 
   #       - sv_phirel
   # sv_features:
   #    length: 10
   #    vars:
   #       - [sv_pt_log, 4, 0.6]
   #       - [sv_mass, 1.2, 0.3]
   #       - sv_etarel
   #       - sv_phirel
   #       - [sv_abseta, 0.5, 1.6]
   #       - [sv_ntracks, 3, 1]
   #       - [sv_normchi2, 0.8, 0.6]
   #       - [sv_dxy, 0.4, 0.25]
   #       - [sv_dxysig, 7, 0.02]
   #       - [sv_d3d, 0.5, 0.2]
   #       - [sv_d3dsig, 7, 0.02]
   # sv_mask:
   #    length: 10
   #    vars:
   #       - sv_mask

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [
      is_tt, isnot_tt
      ]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
      # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass) 

observers:
   - event_no
   # - fj_pt
   # - fj_eta
   # - fj_phi
   # - fj_sdmass
   # - fj_sdmass_fromsubjets
   # - npfcands
   # - pfDeepBoostedDiscriminatorsJetTags_TvsQCD
   # - pfDeepBoostedDiscriminatorsJetTags_WvsQCD
   # - pfDeepBoostedDiscriminatorsJetTags_HbbvsQCD
   # - pfMassDecorrelatedDeepBoostedDiscriminatorsJetTags_TvsQCD
   # - pfMassDecorrelatedDeepBoostedDiscriminatorsJetTags_WvsQCD
   # - pfMassDecorrelatedDeepBoostedDiscriminatorsJetTags_ZHbbvsQCD
   # - pfParticleNetDiscriminatorsJetTags_TvsQCD
   # - pfParticleNetDiscriminatorsJetTags_WvsQCD
   # - pfParticleNetDiscriminatorsJetTags_HbbvsQCD
   # - pfMassDecorrelatedParticleNetDiscriminatorsJetTags_XbbvsQCD
   # - pfMassDecorrelatedParticleNetJetTags_probXbb
   # - pfMassDecorrelatedParticleNetJetTags_probXcc
   # - pfMassDecorrelatedParticleNetJetTags_probXqq

# weights:
#    ### [option 1] use precomputed weights stored in the input files
#    # use_precomputed_weights: true
#    # weight_branches: [weight, class_weight]
#    ### [option 2] compute weights on-the-fly using reweighting histograms
#    use_precomputed_weights: false
#    reweight_method: flat
#    class_weights: [
#       2,
#       1,
#       1,
#       1,
#       0.33, 0.33, 0.33,
#       ]
#    reweight_hists:

treename: deepntuplizer/tree