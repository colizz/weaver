selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   (evt%5!=0)

test_time_selection:
   ### selection to apply at test time (i.e., when running w/ --predict)
   (evt%1==0)

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   w_gam_mask: awkward.JaggedArray.ones_like(w_gam_dphi)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  ### [note]: `[var]_mask` will not be transformed even if `method=auto`
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   ps_points:
      length: 20
      vars: 
         - [w_gam_dphi, 0, 0.8]
         - [w_gam_dthe, 0, 2]
   ps_features:
      length: 20
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [w_gam_dphi, 0, 0.8]
         - [w_gam_dthe, 0, 2]
         - [w_gam_eraw, 0, 10]
         - [w_gam_latm, 0, 5]
         - [w_gam_secm, 0, 0.05]
         - [w_gam_a20m, 0, 5]
         - [w_gam_a42m, 0, 5]
         - [w_gam_hits, 0, 0.6]

   ps_mask:
      length: 20
      vars: 
         - w_gam_mask
labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [
      lab_s, lab_b
      ]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
      # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass) 

observers:

treename: Tree